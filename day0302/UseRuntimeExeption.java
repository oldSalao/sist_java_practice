package day0302;

/**
 * RuntimeExeption의 처리.<br>
 * JVM이 자동으로 처리하는 예외로, 개발자가 코드를 작성하는 단계에서는 Compile Error가 발생하지 않는 예외.<br>
 * 개발자가 놓치기 쉬운 예외임.<br>
 * JVM이 자동으로 처리하여 예외메시지를 출력해준다.(서버의 정보가 외부로 유출.)<br>
 * 
 * @author user
 */
public class UseRuntimeExeption {
	/**
	 * main method의 arguments를 두개 입력받아 두수를 나누어 결과를 출력하는 일.
	 * 
	 * @param args
	 */
	public static void main(String[] args) {
		try {
			int a = Integer.parseInt(args[0]);
			int b = Integer.parseInt(args[1]);
			int result = 0;

			System.out.println(a + ", " + b);

			result = a / b;

			System.out.println(result);
		} catch (ArrayIndexOutOfBoundsException e) {
			System.err.println("배열에서 인덱스가 존재하지 않는 예외발생");// 단순한 메시지
			System.err.println(
					"----------------------------------------------------------------------------------------------------------------");
			System.err.println("간단한 예외의 이유만 출력 : " + e.getMessage());// 간단한 이유
			System.err.println(
					"----------------------------------------------------------------------------------------------------------------");
			System.err.println("예외처리 클래스와 이유 출력 : " + e);// 예외처리 클래스와 간단한 이유
			System.err.println(
					"----------------------------------------------------------------------------------------------------------------");
			System.err.print("예외의 자세한 내용 출력 : ");
			e.printStackTrace(); // 자세한 이유.
		} catch (NumberFormatException e) {
			System.err.println("문자열에 숫자형 데이터가 들어가 있지 않음.");// 단순한 메시지
			System.err.println(
					"----------------------------------------------------------------------------------------------------------------");
			System.err.println("간단한 예외의 이유만 출력 : " + e.getMessage());// 간단한 이유
			System.err.println(
					"----------------------------------------------------------------------------------------------------------------");
			System.err.println("예외처리 클래스와 이유 출력 : " + e);// 예외처리 클래스와 간단한 이유
			System.err.println(
					"----------------------------------------------------------------------------------------------------------------");
			System.err.print("예외의 자세한 내용 출력 : ");
			e.printStackTrace(); // 자세한 이유.
		} catch (ArithmeticException e) {
			System.err.println("수를 0으로 나눌 수 없음.");// 단순한 메시지
			System.err.println(
					"----------------------------------------------------------------------------------------------------------------");
			System.err.println("간단한 예외의 이유만 출력 : " + e.getMessage());// 간단한 이유
			System.err.println(
					"----------------------------------------------------------------------------------------------------------------");
			System.err.println("예외처리 클래스와 이유 출력 : " + e);// 예외처리 클래스와 간단한 이유
			System.err.println(
					"----------------------------------------------------------------------------------------------------------------");
			System.err.print("예외의 자세한 내용 출력 : ");
			e.printStackTrace(); // 자세한 이유.
		} catch (Exception e) { // 예외처리 클래스의 부모클래스 Exception은 모든 예외를 다 잡을 수 있다.
			System.err.println("모든 예외 처리, 개발자가 인지하지 못한 예외를 잡는다.");// 단순한 메시지
			System.err.println(
					"----------------------------------------------------------------------------------------------------------------");
			System.err.println("간단한 예외의 이유만 출력 : " + e.getMessage());// 간단한 이유
			System.err.println(
					"----------------------------------------------------------------------------------------------------------------");
			System.err.println("예외처리 클래스와 이유 출력 : " + e);// 예외처리 클래스와 간단한 이유
			System.err.println(
					"----------------------------------------------------------------------------------------------------------------");
			System.err.print("예외의 자세한 내용 출력 : ");
			e.printStackTrace(); // 자세한 이유.
		}finally {
			System.out.println("예외의 유무를 떠나서 반드시 실행되는 코드");
		}

	}
}
